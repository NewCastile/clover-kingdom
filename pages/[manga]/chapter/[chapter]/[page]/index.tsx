import Head from "next/head";
import { Stack, Text } from "@chakra-ui/react";
import { MongoClient } from "mongodb";
import { GetServerSidePropsContext, InferGetServerSidePropsType } from "next";

import ChapterScreen from "../../../../../components/Screens/ChapterScreen";
import { RawMangaDocument } from "../../../../../types";

export async function getServerSideProps(
  context: GetServerSidePropsContext<{ manga: string; chapter: string; page: string }>,
) {
  const { params } = context;

  if (!params) throw new Error("Ruta sin parametros");
  const manga = params.manga;
  const chapterNumber = parseInt(params.chapter);
  const page = parseInt(params.page);
  const dbURI = process.env.MONGODB_URI;

  try {
    const connection = await MongoClient.connect(dbURI as string).then((client) => client);

    if (!connection) throw new Error("Error al conectar con la base de datos");
    const db = connection.db("manga-reader-database");
    const dbCollection = db.collection<RawMangaDocument>("chapters");

    if (!dbCollection) throw new Error("Error obteniendo colección de capítulos");
    const [
      {
        chapters: [chapter],
      },
    ] = await dbCollection
      .aggregate<RawMangaDocument>([
        { $match: { name: manga } },
        {
          $project: {
            chapters: {
              $filter: {
                input: "$chapters",
                as: "chapter",
                cond: { $eq: ["$$chapter.number", chapterNumber] },
              },
            },
          },
        },
      ])
      .toArray();

    if (!chapter) throw new Error("Capítulo no encontrado");
    if (page > chapter.pages.length)
      throw new Error(`Este capítulo solo posee ${chapter.pages.length}`);
    if (page === 0) throw new Error("Todos los capítulos empiezan desde la página 1");
    const { arc } = chapter;

    return {
      props: {
        arc,
        chapter,
        page,
        manga,
      },
    };
  } catch (_err) {
    return {
      redirect: {
        destination: `/${manga}`,
        permanent: false,
      },
    };
  }
}

export default function Chapter({
  chapter,
  page,
  arc,
  manga,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <>
      <Head>
        <title>Black Clover - {chapter.number}</title>
        <meta content="Generated by create next app" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>
      <Stack alignItems={"center"} direction={"column"} justifyContent={"center"} py={"2rem"}>
        <Text
          backgroundColor={"pastel-black"}
          fontSize={"3xl"}
          fontWeight={"extrabold"}
          padding={"1rem"}
          textAlign={"center"}
          width={"100%"}
        >
          {arc}
        </Text>
        <Stack
          alignItems={"center"}
          as={"section"}
          direction={"row"}
          justifyContent={"space-evenly"}
          width={"100%"}
        >
          {chapter && (
            <ChapterScreen
              manga={manga}
              number={chapter.number}
              page={page as number}
              pages={chapter.pages}
            />
          )}
        </Stack>
      </Stack>
    </>
  );
}
